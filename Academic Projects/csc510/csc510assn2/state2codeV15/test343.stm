# D. Parson, test343.stm is test input for CSC343Compile.py

machine processor {
    a = 1, b = 2.3, c = "a string ", tid = -1, pid = -1 ;
    start init, state afterstart, accept alldone ;
    init -> afterstart init()[]/@fork()@;
    afterstart -> alldone fork(pid, tid)[]/@
        msg("post-fork pid " + str(pid) + " tid " + str(tid));
        msg("post-fork test of local vars a " + str(a)
            + " b " + str(b) + " c " + c);
        assign('a', -12345);
        msg("post-assign test of local var a " + str(a))@;
}

machine thread {
    meals = 1, i = @None@, negator = @None@, q = @None@, v = @None@;
    start init, state breakfast, state lunch, state dinner, 
        state snack, state acidreflux, accept gnight ;
    init -> breakfast init()[]/@meals = sample(1,3,"uniform");
        msg("breakfast consists of " + str(meals) + " meals");
        trigger(1, "eat")@
    breakfast -> breakfast eat()[@meals > 0@]/@meals -= 1;
        trigger(1, "eat")@;
    breakfast -> lunch eat()[@meals == 0@]/@meals = sample(1,3,"uniform");
        msg("lunch consists of " + str(meals) + " meals");
        trigger(1, "eat")@,
    lunch -> lunch eat()[@meals > 0@]/@meals -= 1;
        trigger(1, "eat")@;
    lunch -> dinner eat()[@meals == 0@]/@meals = sample(1,3,"uniform");
        msg("dinner consists of " + str(meals) + " meals");
        trigger(1, "eat")@
    dinner -> dinner eat()[@meals > 0@]/@meals -= 1;
        trigger(1, "eat")@;
    dinner -> snack eat()[@meals == 0@]/@meals = sample(2,3,"uniform");
        msg("snack consists of " + str(meals) + " meals");
        trigger(1, "eat")@;
    snack -> snack eat()[@meals == 1@]/@meals -= 1;
        trigger(1, "eat")@;
    snack -> acidreflux eat()[@meals > 1@]/@meals -= 1;
        trigger(1, "eat")@;
    snack -> gnight eat()[@meals == 0@]/@
        negator = lambda x : -x ;
        q = Queue(ispriority=True) ;
        [q.enq(i, i) for i in range(1,10)];
        [msg("Q [" + str(i) + "] = " + str(q.deq())) for i in range(1,10)];
        [q.enq(i, i) for i in range(1,10)];
        q.age(negator);
        [msg("Q [" + str(i) + "] = " + str(q.deq())) for i in range(1,10)];
        for i in range(11,100,10): q.enq(i, i);
        q.age(functools.partial(operator.mul,.25));
        for i in range(1,10): msg("Q [" + str(i) + "] = " + str(q.deq()));
        for i in range(11,100,10): q.enq(i, i);
        q.age(functools.partial(operator.mul,-.25));
        for v in q.gen(isDestructive=False): msg("Q GEN: " + str(v));
        for v in q.gen(isDestructive=True): msg("Q GEN: " + str(v));
        for v in q.gen(isDestructive=False): msg("Q GEN: " + str(v));
        for v in q.gen(isDestructive=True): msg("Q GEN: " + str(v));
        msg("good night")@;
    acidreflux -> snack eat()[]/@trigger(1, "eat")@;
}

processor
