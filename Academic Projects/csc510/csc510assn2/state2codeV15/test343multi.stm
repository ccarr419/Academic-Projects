# D. Parson, test343.stm is test input for CSC343Compile.py
# test343multi.stm tests s1, s2, s3 -> * types of transitions
# Added some macro tests August 2, 2014.

machine processor {
    a = 1, b = 2.3, c = 'string c', d = "string d",
        l = @[0, [1], (2,), {3 : 'three'}]@, pid = -1, tid = -1 ;
    start init, state afterstart, accept alldone ;
    init -> afterstart init()[]/@fork()@;
    afterstart -> alldone fork(pid, tid)[]/@
        msg("post-fork pid " + str(pid) + " tid " + str(tid));
        msg("post-fork test of local vars a " + str(a)
            + " b " + str(b) + " c " + c + " d " + str(d) + " l " + str(l))@;
}

machine thread {
    meals = 1 ;
    start init, state breakfast, state lunch, state dinner,
        state snack, state acidreflux, accept gnight ;
    macro sample1 @ meals = sample(1,3,"uniform") @
    macro sample2 @ meals = sample(2,3,"uniform") @
    init -> breakfast init()[]/@ sample1 ;
        msg("breakfast consists of " + str(meals) + " meals");
        trigger(1, "eat")@
    breakfast, lunch, dinner -> * eat()[@meals > 0@]/@meals -= 1;
        trigger(1, "eat")@;
    breakfast -> lunch eat()[@meals == 0@]/@sample1 ;
        msg("lunch consists of " + str(meals) + " meals");
        trigger(1, "eat")@,
    lunch -> dinner eat()[@meals == 0@]/@sample1 ;
        msg("dinner consists of " + str(meals) + " meals");
        trigger(1, "eat")@
    dinner -> snack eat()[@meals == 0@]/@sample2 ;
        msg("snack consists of " + str(meals) + " meals");
        trigger(1, "eat")@;
    snack -> snack eat()[@meals == 1@]/@meals -= 1;
        trigger(1, "eat")@;
    snack -> acidreflux eat()[@meals > 1@]/@meals -= 1;
        trigger(1, "eat")@;
    snack -> gnight eat()[@meals == 0@]/@msg("good night")@;
    acidreflux -> snack eat()[]/@trigger(1, "eat")@;
}

processor
