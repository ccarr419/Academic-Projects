# collect_reduce.txt  -- This is a very minimal test.

int i = function(int v) {
    return v ;
}

string printiarray = function(int [] iarray, int i) {
    return (i > -1 && i < length(iarray))
        ? (iarray[i] ~ printiarray(iarray, i+1))
        : ' ';
}

'test 1 on reduce - with an initial value';
{{ reduce - 15 i(1); i(2); i(3); i(4); i(5); i(6); }};
'test 2 on reduce * with an initial value';
{{ reduce * 2 i(1); i(2); i(3); i(4); i(5); i(6); }};
'test 3 on reduce + without an initial value';
{{ reduce + i(1); i(2); i(3); i(4); i(5); i(6); }};
'test 4 on reduce / with an initial value';
{{ reduce * 3000000 i(1); i(3); i(4); i(5); }};
'test 1 on collect';
printiarray({{collect i(1); i(2); i(3); i(4); i(5); i(6); }}, 0);

float f = function(float v) {
    return v ;
}

string printfarray = function(float [] farray, int i) {
    return (i > -1 && i < length(farray))
        ? (farray[i] ~ printfarray(farray, i+1))
        : ' ';
}

'test A on reduce - with an initial value';
{{ reduce - 15.0 f(1); f(2); f(3); f(4); f(5); f(6); }};
'test B on reduce * with an initial value';
{{ reduce * 2.0 f(1); f(2); f(3); f(4); f(5); f(6); }};
'test C on reduce + without an initial value';
{{ reduce + f(1); f(2); f(3); f(4); f(5); f(6); }};
'test D on reduce / with an initial value';
{{ reduce * 3000000.0 f(1); f(3); f(4); f(5); }};
'test E on collect';
printfarray({{collect f(1); f(2); f(3); f(4); f(5); f(6); }}, 0);

string s = function(string v) {
    return v ;
}

string printsarray = function(string [] sarray, int i) {
    return (i > -1 && i < length(sarray))
        ? (sarray[i] ~ printsarray(sarray, i+1))
        : ' ';
}

'test S1 on reduce + without an initial value';
{{ reduce + s('a'); s('b'); s('c'); s('d'); s('e'); s('f'); }};
'test S2 on reduce + with an initial value';
{{ reduce + '!' s('a'); s('b'); s('c'); s('d'); s('e'); s('f'); }};
'test S3 on collect';
printsarray({{collect s('A'); s('B'); s('C'); s('D'); s('E'); s('F'); }}, 0);

int [] ia = function(int i) {
    return [i] ;
}

'test A1 reduce + some arrays';
printiarray({{ reduce + ia(1); ia(2); ia(3); ia(4); ia(5); ia(6); }}, 0);
