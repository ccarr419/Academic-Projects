// template.ck.txt -- template for generating ChucK code voa
// State2ChuckMidi.py. See State2ChuckMidi.py and State2CodeParser.py.
// D. Parson fall 2013.
// run "chuck --probe" to find the MIDI ports. On my machine it shows this:
// [chuck]: ------( chuck -- 4 MIDI inputs )------
// [chuck]:     [0] : "IAC Driver Bus 1"
// [chuck]:     [1] : "IAC Driver "
// [chuck]:     [2] : "UA-101"
// [chuck]:     [3] : "USB Trigger Finger"
// [chuck]: 
// [chuck]: ------( chuck -- 4 MIDI outputs )-----
// [chuck]:     [0] : "IAC Driver Bus 1"
// [chuck]:     [1] : "IAC Driver "
// [chuck]:     [2] : "UA-101"
// [chuck]:     [3] : "USB Trigger Finger"
//
// Now to run the Trigger finger as input and IAC Driver as output (perhaps
// connected to Ableton Live), this would be the command line:
//              chuck testmidi.ck:3:1
// giving MIDI device 3 as input and 1 as output of this Chuck script.

MidiIn min ;
MidiOut mout ;
MidiMsg msg ;
int stateIndex ;
int oldIndex ;

Std.atoi(me.arg(0)) => int midiinnum ;
Std.atoi(me.arg(1)) => int midioutnum ;

if (!min.open(midiinnum)) {
    <<< "Cannot open input", me.arg(0) >>>;
    me.exit();
}

if (!mout.open(midioutnum)) {
    <<< "Cannot open input", me.arg(1) >>>;
    me.exit();
}

fun void emit(MidiMsg emitter) {
    mout.send(emitter);
}

fun void mainloop() {
    stateIndex => oldIndex ;
    while (true) {
        min => now ;
        while (min.recv(msg)) {
            midiTranslator(msg);
            if (stateIndex != oldIndex) {
                stateIndex => oldIndex ;
            }
        }
    }
}


