Created by PLY version 3.0 (http://www.dabeaz.com/ply)

Grammar

Rule 1     S' -> goal
Rule 2     goal -> stmtlist
Rule 3     stmtlist -> stmtrest statement
Rule 4     stmtrest -> stmtrest statement
Rule 5     stmtrest -> epsilon
Rule 6     statement -> assign
Rule 7     statement -> expression SEP
Rule 8     assign -> varassign SEP
Rule 9     assign -> funcassign
Rule 10    varassign -> typedecl ID ASSIGN_OP expression
Rule 11    funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE
Rule 12    pushToSymTable -> epsilon
Rule 13    paramlist -> typedecl ID paramrest
Rule 14    paramlist -> epsilon
Rule 15    paramrest -> paramrest COMMA typedecl ID
Rule 16    paramrest -> epsilon
Rule 17    expression -> expression ADD_OP expression
Rule 18    expression -> expression SUBTRACT_OP expression
Rule 19    expression -> expression MULTIPLY_OP expression
Rule 20    expression -> expression DIVIDE_OP expression
Rule 21    expression -> expression MODULO_OP expression
Rule 22    expression -> expression EQ_OP expression
Rule 23    expression -> expression NE_OP expression
Rule 24    expression -> expression GT_OP expression
Rule 25    expression -> expression GE_OP expression
Rule 26    expression -> expression LT_OP expression
Rule 27    expression -> expression LE_OP expression
Rule 28    expression -> expression LOGAND_OP expression
Rule 29    expression -> expression LOGOR_OP expression
Rule 30    expression -> expression TILDE_OP expression
Rule 31    expression -> SUBTRACT_OP expression
Rule 32    expression -> LOGNOT_OP expression
Rule 33    expression -> LENGTH LPAREN ID RPAREN
Rule 34    expression -> INT LPAREN expression RPAREN
Rule 35    expression -> FLOAT LPAREN expression RPAREN
Rule 36    expression -> STRING LPAREN expression RPAREN
Rule 37    expression -> expression QUESTION_OP expression COLON_OP expression
Rule 38    expression -> LPAREN expression RPAREN
Rule 39    expression -> scalarvalue
Rule 40    expression -> arrayvalues
Rule 41    expression -> ID subscript
Rule 42    subscript -> LBRACK expression RBRACK
Rule 43    subscript -> epsilon
Rule 44    expression -> exprfuncall
Rule 45    expression -> exprparallel
Rule 46    exprfuncall -> ID LPAREN arglist RPAREN
Rule 47    arglist -> expression argrest
Rule 48    arglist -> epsilon
Rule 49    argrest -> argrest COMMA expression
Rule 50    argrest -> epsilon
Rule 51    exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE
Rule 52    parallelOp -> REDUCE reduceop reduceinit
Rule 53    parallelOp -> COLLECT
Rule 54    reduceop -> ADD_OP
Rule 55    reduceop -> SUBTRACT_OP
Rule 56    reduceop -> MULTIPLY_OP
Rule 57    reduceop -> DIVIDE_OP
Rule 58    reduceop -> MODULO_OP
Rule 59    parallelFuncs -> exprfuncall SEP exprfuncall SEP parallelMoreFuncs
Rule 60    parallelMoreFuncs -> parallelMoreFuncs exprfuncall SEP
Rule 61    parallelMoreFuncs -> epsilon
Rule 62    reduceinit -> scalarvalue
Rule 63    reduceinit -> epsilon
Rule 64    scalarvalue -> FLOATNUMBER
Rule 65    scalarvalue -> INTNUMBER
Rule 66    scalarvalue -> STRINGCONSTANT
Rule 67    arrayvalues -> LBRACK arrayelements RBRACK
Rule 68    arrayelements -> expression moreelements
Rule 69    arrayelements -> epsilon
Rule 70    moreelements -> COMMA expression moreelements
Rule 71    moreelements -> epsilon
Rule 72    typedecl -> INT arraydecl
Rule 73    typedecl -> FLOAT arraydecl
Rule 74    typedecl -> STRING arraydecl
Rule 75    arraydecl -> LBRACK RBRACK
Rule 76    arraydecl -> epsilon
Rule 77    epsilon -> <empty>

Terminals, with rules where they appear

ADD_OP               : 16 53
ASSIGN_OP            : 9 10
COLLECT              : 52
COLON_OP             : 36
COMMA                : 14 48 69
DIVIDE_OP            : 19 56
EQ_OP                : 21
FLOAT                : 34 72
FLOATNUMBER          : 63
FUNCTION             : 10
GE_OP                : 24
GT_OP                : 23
ID                   : 9 10 12 14 32 40 45
INT                  : 33 71
INTNUMBER            : 64
LBRACE               : 10 50 50
LBRACK               : 41 66 74
LENGTH               : 32
LE_OP                : 26
LOGAND_OP            : 27
LOGNOT_OP            : 31
LOGOR_OP             : 28
LPAREN               : 10 32 33 34 35 37 45
LT_OP                : 25
MODULO_OP            : 20 57
MULTIPLY_OP          : 18 55
NE_OP                : 22
QUESTION_OP          : 36
RBRACE               : 10 50 50
RBRACK               : 41 66 74
REDUCE               : 51
RETURN               : 10
RPAREN               : 10 32 33 34 35 37 45
SEP                  : 6 7 10 58 58 59
STRING               : 35 73
STRINGCONSTANT       : 65
SUBTRACT_OP          : 17 30 54
TILDE_OP             : 29
error                : 

Nonterminals, with rules where they appear

arglist              : 45
argrest              : 46 48
arraydecl            : 71 72 73
arrayelements        : 66
arrayvalues          : 39
assign               : 5
epsilon              : 4 11 13 15 42 47 49 60 62 68 70 75
expression           : 6 9 10 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 31 33 34 35 36 36 36 37 41 46 48 67 69
exprfuncall          : 43 58 58 59
exprparallel         : 44
funcassign           : 8
goal                 : 0
moreelements         : 67 69
parallelFuncs        : 50
parallelMoreFuncs    : 58 59
parallelOp           : 50
paramlist            : 10
paramrest            : 12 14
pushToSymTable       : 10
reduceinit           : 51
reduceop             : 51
scalarvalue          : 38 61
statement            : 2 3
stmtlist             : 1
stmtrest             : 2 3 10
subscript            : 40
typedecl             : 9 10 12 14
varassign            : 7

Parsing method: LALR

state 0

    (0) S' -> . goal
    (1) goal -> . stmtlist
    (2) stmtlist -> . stmtrest statement
    (3) stmtrest -> . stmtrest statement
    (4) stmtrest -> . epsilon
    (76) epsilon -> .

    SUBTRACT_OP     reduce using rule 76 (epsilon -> .)
    LOGNOT_OP       reduce using rule 76 (epsilon -> .)
    LENGTH          reduce using rule 76 (epsilon -> .)
    INT             reduce using rule 76 (epsilon -> .)
    FLOAT           reduce using rule 76 (epsilon -> .)
    STRING          reduce using rule 76 (epsilon -> .)
    LPAREN          reduce using rule 76 (epsilon -> .)
    ID              reduce using rule 76 (epsilon -> .)
    FLOATNUMBER     reduce using rule 76 (epsilon -> .)
    INTNUMBER       reduce using rule 76 (epsilon -> .)
    STRINGCONSTANT  reduce using rule 76 (epsilon -> .)
    LBRACK          reduce using rule 76 (epsilon -> .)
    LBRACE          reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 1
    stmtrest                       shift and go to state 2
    goal                           shift and go to state 3
    stmtlist                       shift and go to state 4

state 1

    (4) stmtrest -> epsilon .

    SUBTRACT_OP     reduce using rule 4 (stmtrest -> epsilon .)
    LOGNOT_OP       reduce using rule 4 (stmtrest -> epsilon .)
    LENGTH          reduce using rule 4 (stmtrest -> epsilon .)
    INT             reduce using rule 4 (stmtrest -> epsilon .)
    FLOAT           reduce using rule 4 (stmtrest -> epsilon .)
    STRING          reduce using rule 4 (stmtrest -> epsilon .)
    LPAREN          reduce using rule 4 (stmtrest -> epsilon .)
    ID              reduce using rule 4 (stmtrest -> epsilon .)
    FLOATNUMBER     reduce using rule 4 (stmtrest -> epsilon .)
    INTNUMBER       reduce using rule 4 (stmtrest -> epsilon .)
    STRINGCONSTANT  reduce using rule 4 (stmtrest -> epsilon .)
    LBRACK          reduce using rule 4 (stmtrest -> epsilon .)
    LBRACE          reduce using rule 4 (stmtrest -> epsilon .)
    RETURN          reduce using rule 4 (stmtrest -> epsilon .)


state 2

    (2) stmtlist -> stmtrest . statement
    (3) stmtrest -> stmtrest . statement
    (5) statement -> . assign
    (6) statement -> . expression SEP
    (7) assign -> . varassign SEP
    (8) assign -> . funcassign
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (9) varassign -> . typedecl ID ASSIGN_OP expression
    (10) funcassign -> . typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE
    (71) typedecl -> . INT arraydecl
    (72) typedecl -> . FLOAT arraydecl
    (73) typedecl -> . STRING arraydecl

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 13
    FLOAT           shift and go to state 21
    STRING          shift and go to state 14
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    typedecl                       shift and go to state 23
    exprparallel                   shift and go to state 6
    scalarvalue                    shift and go to state 20
    exprfuncall                    shift and go to state 7
    varassign                      shift and go to state 24
    statement                      shift and go to state 11
    arrayvalues                    shift and go to state 12
    expression                     shift and go to state 26
    assign                         shift and go to state 27
    funcassign                     shift and go to state 17

state 3

    (0) S' -> goal .



state 4

    (1) goal -> stmtlist .

    $end            reduce using rule 1 (goal -> stmtlist .)


state 5

    (63) scalarvalue -> FLOATNUMBER .

    ADD_OP          reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    SUBTRACT_OP     reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    MULTIPLY_OP     reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    DIVIDE_OP       reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    MODULO_OP       reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    EQ_OP           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    NE_OP           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    GT_OP           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    GE_OP           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    LT_OP           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    LE_OP           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    LOGAND_OP       reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    LOGOR_OP        reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    TILDE_OP        reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    QUESTION_OP     reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    COMMA           reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    RPAREN          reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    SEP             reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    COLON_OP        reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    RBRACK          reduce using rule 63 (scalarvalue -> FLOATNUMBER .)
    ID              reduce using rule 63 (scalarvalue -> FLOATNUMBER .)


state 6

    (44) expression -> exprparallel .

    ADD_OP          reduce using rule 44 (expression -> exprparallel .)
    SUBTRACT_OP     reduce using rule 44 (expression -> exprparallel .)
    MULTIPLY_OP     reduce using rule 44 (expression -> exprparallel .)
    DIVIDE_OP       reduce using rule 44 (expression -> exprparallel .)
    MODULO_OP       reduce using rule 44 (expression -> exprparallel .)
    EQ_OP           reduce using rule 44 (expression -> exprparallel .)
    NE_OP           reduce using rule 44 (expression -> exprparallel .)
    GT_OP           reduce using rule 44 (expression -> exprparallel .)
    GE_OP           reduce using rule 44 (expression -> exprparallel .)
    LT_OP           reduce using rule 44 (expression -> exprparallel .)
    LE_OP           reduce using rule 44 (expression -> exprparallel .)
    LOGAND_OP       reduce using rule 44 (expression -> exprparallel .)
    LOGOR_OP        reduce using rule 44 (expression -> exprparallel .)
    TILDE_OP        reduce using rule 44 (expression -> exprparallel .)
    QUESTION_OP     reduce using rule 44 (expression -> exprparallel .)
    SEP             reduce using rule 44 (expression -> exprparallel .)
    RPAREN          reduce using rule 44 (expression -> exprparallel .)
    COMMA           reduce using rule 44 (expression -> exprparallel .)
    RBRACK          reduce using rule 44 (expression -> exprparallel .)
    COLON_OP        reduce using rule 44 (expression -> exprparallel .)


state 7

    (43) expression -> exprfuncall .

    ADD_OP          reduce using rule 43 (expression -> exprfuncall .)
    SUBTRACT_OP     reduce using rule 43 (expression -> exprfuncall .)
    MULTIPLY_OP     reduce using rule 43 (expression -> exprfuncall .)
    DIVIDE_OP       reduce using rule 43 (expression -> exprfuncall .)
    MODULO_OP       reduce using rule 43 (expression -> exprfuncall .)
    EQ_OP           reduce using rule 43 (expression -> exprfuncall .)
    NE_OP           reduce using rule 43 (expression -> exprfuncall .)
    GT_OP           reduce using rule 43 (expression -> exprfuncall .)
    GE_OP           reduce using rule 43 (expression -> exprfuncall .)
    LT_OP           reduce using rule 43 (expression -> exprfuncall .)
    LE_OP           reduce using rule 43 (expression -> exprfuncall .)
    LOGAND_OP       reduce using rule 43 (expression -> exprfuncall .)
    LOGOR_OP        reduce using rule 43 (expression -> exprfuncall .)
    TILDE_OP        reduce using rule 43 (expression -> exprfuncall .)
    QUESTION_OP     reduce using rule 43 (expression -> exprfuncall .)
    SEP             reduce using rule 43 (expression -> exprfuncall .)
    RPAREN          reduce using rule 43 (expression -> exprfuncall .)
    COMMA           reduce using rule 43 (expression -> exprfuncall .)
    RBRACK          reduce using rule 43 (expression -> exprfuncall .)
    COLON_OP        reduce using rule 43 (expression -> exprfuncall .)


state 8

    (65) scalarvalue -> STRINGCONSTANT .

    ADD_OP          reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    SUBTRACT_OP     reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    MULTIPLY_OP     reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    DIVIDE_OP       reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    MODULO_OP       reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    EQ_OP           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    NE_OP           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    GT_OP           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    GE_OP           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    LT_OP           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    LE_OP           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    LOGAND_OP       reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    LOGOR_OP        reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    TILDE_OP        reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    QUESTION_OP     reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    COMMA           reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    RPAREN          reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    SEP             reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    COLON_OP        reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    RBRACK          reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)
    ID              reduce using rule 65 (scalarvalue -> STRINGCONSTANT .)


state 9

    (30) expression -> SUBTRACT_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 31
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 10

    (64) scalarvalue -> INTNUMBER .

    ADD_OP          reduce using rule 64 (scalarvalue -> INTNUMBER .)
    SUBTRACT_OP     reduce using rule 64 (scalarvalue -> INTNUMBER .)
    MULTIPLY_OP     reduce using rule 64 (scalarvalue -> INTNUMBER .)
    DIVIDE_OP       reduce using rule 64 (scalarvalue -> INTNUMBER .)
    MODULO_OP       reduce using rule 64 (scalarvalue -> INTNUMBER .)
    EQ_OP           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    NE_OP           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    GT_OP           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    GE_OP           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    LT_OP           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    LE_OP           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    LOGAND_OP       reduce using rule 64 (scalarvalue -> INTNUMBER .)
    LOGOR_OP        reduce using rule 64 (scalarvalue -> INTNUMBER .)
    TILDE_OP        reduce using rule 64 (scalarvalue -> INTNUMBER .)
    QUESTION_OP     reduce using rule 64 (scalarvalue -> INTNUMBER .)
    COMMA           reduce using rule 64 (scalarvalue -> INTNUMBER .)
    RPAREN          reduce using rule 64 (scalarvalue -> INTNUMBER .)
    SEP             reduce using rule 64 (scalarvalue -> INTNUMBER .)
    COLON_OP        reduce using rule 64 (scalarvalue -> INTNUMBER .)
    RBRACK          reduce using rule 64 (scalarvalue -> INTNUMBER .)
    ID              reduce using rule 64 (scalarvalue -> INTNUMBER .)


state 11

    (2) stmtlist -> stmtrest statement .
    (3) stmtrest -> stmtrest statement .

    $end            reduce using rule 2 (stmtlist -> stmtrest statement .)
    SUBTRACT_OP     reduce using rule 3 (stmtrest -> stmtrest statement .)
    LOGNOT_OP       reduce using rule 3 (stmtrest -> stmtrest statement .)
    LENGTH          reduce using rule 3 (stmtrest -> stmtrest statement .)
    INT             reduce using rule 3 (stmtrest -> stmtrest statement .)
    FLOAT           reduce using rule 3 (stmtrest -> stmtrest statement .)
    STRING          reduce using rule 3 (stmtrest -> stmtrest statement .)
    LPAREN          reduce using rule 3 (stmtrest -> stmtrest statement .)
    ID              reduce using rule 3 (stmtrest -> stmtrest statement .)
    FLOATNUMBER     reduce using rule 3 (stmtrest -> stmtrest statement .)
    INTNUMBER       reduce using rule 3 (stmtrest -> stmtrest statement .)
    STRINGCONSTANT  reduce using rule 3 (stmtrest -> stmtrest statement .)
    LBRACK          reduce using rule 3 (stmtrest -> stmtrest statement .)
    LBRACE          reduce using rule 3 (stmtrest -> stmtrest statement .)


state 12

    (39) expression -> arrayvalues .

    ADD_OP          reduce using rule 39 (expression -> arrayvalues .)
    SUBTRACT_OP     reduce using rule 39 (expression -> arrayvalues .)
    MULTIPLY_OP     reduce using rule 39 (expression -> arrayvalues .)
    DIVIDE_OP       reduce using rule 39 (expression -> arrayvalues .)
    MODULO_OP       reduce using rule 39 (expression -> arrayvalues .)
    EQ_OP           reduce using rule 39 (expression -> arrayvalues .)
    NE_OP           reduce using rule 39 (expression -> arrayvalues .)
    GT_OP           reduce using rule 39 (expression -> arrayvalues .)
    GE_OP           reduce using rule 39 (expression -> arrayvalues .)
    LT_OP           reduce using rule 39 (expression -> arrayvalues .)
    LE_OP           reduce using rule 39 (expression -> arrayvalues .)
    LOGAND_OP       reduce using rule 39 (expression -> arrayvalues .)
    LOGOR_OP        reduce using rule 39 (expression -> arrayvalues .)
    TILDE_OP        reduce using rule 39 (expression -> arrayvalues .)
    QUESTION_OP     reduce using rule 39 (expression -> arrayvalues .)
    SEP             reduce using rule 39 (expression -> arrayvalues .)
    RPAREN          reduce using rule 39 (expression -> arrayvalues .)
    COMMA           reduce using rule 39 (expression -> arrayvalues .)
    RBRACK          reduce using rule 39 (expression -> arrayvalues .)
    COLON_OP        reduce using rule 39 (expression -> arrayvalues .)


state 13

    (33) expression -> INT . LPAREN expression RPAREN
    (71) typedecl -> INT . arraydecl
    (74) arraydecl -> . LBRACK RBRACK
    (75) arraydecl -> . epsilon
    (76) epsilon -> .

    LPAREN          shift and go to state 34
    LBRACK          shift and go to state 33
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 32
    arraydecl                      shift and go to state 35

state 14

    (35) expression -> STRING . LPAREN expression RPAREN
    (73) typedecl -> STRING . arraydecl
    (74) arraydecl -> . LBRACK RBRACK
    (75) arraydecl -> . epsilon
    (76) epsilon -> .

    LPAREN          shift and go to state 36
    LBRACK          shift and go to state 33
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 32
    arraydecl                      shift and go to state 37

state 15

    (37) expression -> LPAREN . expression RPAREN
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 38
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 16

    (40) expression -> ID . subscript
    (45) exprfuncall -> ID . LPAREN arglist RPAREN
    (41) subscript -> . LBRACK expression RBRACK
    (42) subscript -> . epsilon
    (76) epsilon -> .

    LPAREN          shift and go to state 41
    LBRACK          shift and go to state 40
    SEP             reduce using rule 76 (epsilon -> .)
    ADD_OP          reduce using rule 76 (epsilon -> .)
    SUBTRACT_OP     reduce using rule 76 (epsilon -> .)
    MULTIPLY_OP     reduce using rule 76 (epsilon -> .)
    DIVIDE_OP       reduce using rule 76 (epsilon -> .)
    MODULO_OP       reduce using rule 76 (epsilon -> .)
    EQ_OP           reduce using rule 76 (epsilon -> .)
    NE_OP           reduce using rule 76 (epsilon -> .)
    GT_OP           reduce using rule 76 (epsilon -> .)
    GE_OP           reduce using rule 76 (epsilon -> .)
    LT_OP           reduce using rule 76 (epsilon -> .)
    LE_OP           reduce using rule 76 (epsilon -> .)
    LOGAND_OP       reduce using rule 76 (epsilon -> .)
    LOGOR_OP        reduce using rule 76 (epsilon -> .)
    TILDE_OP        reduce using rule 76 (epsilon -> .)
    QUESTION_OP     reduce using rule 76 (epsilon -> .)
    RPAREN          reduce using rule 76 (epsilon -> .)
    COMMA           reduce using rule 76 (epsilon -> .)
    RBRACK          reduce using rule 76 (epsilon -> .)
    COLON_OP        reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 39
    subscript                      shift and go to state 42

state 17

    (8) assign -> funcassign .

    RETURN          reduce using rule 8 (assign -> funcassign .)
    SUBTRACT_OP     reduce using rule 8 (assign -> funcassign .)
    LOGNOT_OP       reduce using rule 8 (assign -> funcassign .)
    LENGTH          reduce using rule 8 (assign -> funcassign .)
    INT             reduce using rule 8 (assign -> funcassign .)
    FLOAT           reduce using rule 8 (assign -> funcassign .)
    STRING          reduce using rule 8 (assign -> funcassign .)
    LPAREN          reduce using rule 8 (assign -> funcassign .)
    ID              reduce using rule 8 (assign -> funcassign .)
    FLOATNUMBER     reduce using rule 8 (assign -> funcassign .)
    INTNUMBER       reduce using rule 8 (assign -> funcassign .)
    STRINGCONSTANT  reduce using rule 8 (assign -> funcassign .)
    LBRACK          reduce using rule 8 (assign -> funcassign .)
    LBRACE          reduce using rule 8 (assign -> funcassign .)
    $end            reduce using rule 8 (assign -> funcassign .)


state 18

    (50) exprparallel -> LBRACE . LBRACE parallelOp parallelFuncs RBRACE RBRACE

    LBRACE          shift and go to state 43


state 19

    (31) expression -> LOGNOT_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 44
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 20

    (38) expression -> scalarvalue .

    ADD_OP          reduce using rule 38 (expression -> scalarvalue .)
    SUBTRACT_OP     reduce using rule 38 (expression -> scalarvalue .)
    MULTIPLY_OP     reduce using rule 38 (expression -> scalarvalue .)
    DIVIDE_OP       reduce using rule 38 (expression -> scalarvalue .)
    MODULO_OP       reduce using rule 38 (expression -> scalarvalue .)
    EQ_OP           reduce using rule 38 (expression -> scalarvalue .)
    NE_OP           reduce using rule 38 (expression -> scalarvalue .)
    GT_OP           reduce using rule 38 (expression -> scalarvalue .)
    GE_OP           reduce using rule 38 (expression -> scalarvalue .)
    LT_OP           reduce using rule 38 (expression -> scalarvalue .)
    LE_OP           reduce using rule 38 (expression -> scalarvalue .)
    LOGAND_OP       reduce using rule 38 (expression -> scalarvalue .)
    LOGOR_OP        reduce using rule 38 (expression -> scalarvalue .)
    TILDE_OP        reduce using rule 38 (expression -> scalarvalue .)
    QUESTION_OP     reduce using rule 38 (expression -> scalarvalue .)
    SEP             reduce using rule 38 (expression -> scalarvalue .)
    RPAREN          reduce using rule 38 (expression -> scalarvalue .)
    COMMA           reduce using rule 38 (expression -> scalarvalue .)
    RBRACK          reduce using rule 38 (expression -> scalarvalue .)
    COLON_OP        reduce using rule 38 (expression -> scalarvalue .)


state 21

    (34) expression -> FLOAT . LPAREN expression RPAREN
    (72) typedecl -> FLOAT . arraydecl
    (74) arraydecl -> . LBRACK RBRACK
    (75) arraydecl -> . epsilon
    (76) epsilon -> .

    LPAREN          shift and go to state 45
    LBRACK          shift and go to state 33
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 32
    arraydecl                      shift and go to state 46

state 22

    (66) arrayvalues -> LBRACK . arrayelements RBRACK
    (67) arrayelements -> . expression moreelements
    (68) arrayelements -> . epsilon
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (76) epsilon -> .
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    RBRACK          reduce using rule 76 (epsilon -> .)
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    scalarvalue                    shift and go to state 20
    exprfuncall                    shift and go to state 7
    arrayelements                  shift and go to state 48
    epsilon                        shift and go to state 47
    arrayvalues                    shift and go to state 12
    expression                     shift and go to state 49

state 23

    (9) varassign -> typedecl . ID ASSIGN_OP expression
    (10) funcassign -> typedecl . ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE

    ID              shift and go to state 50


state 24

    (7) assign -> varassign . SEP

    SEP             shift and go to state 51


state 25

    (32) expression -> LENGTH . LPAREN ID RPAREN

    LPAREN          shift and go to state 52


state 26

    (6) statement -> expression . SEP
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    SEP             shift and go to state 57
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 27

    (5) statement -> assign .

    RETURN          reduce using rule 5 (statement -> assign .)
    SUBTRACT_OP     reduce using rule 5 (statement -> assign .)
    LOGNOT_OP       reduce using rule 5 (statement -> assign .)
    LENGTH          reduce using rule 5 (statement -> assign .)
    INT             reduce using rule 5 (statement -> assign .)
    FLOAT           reduce using rule 5 (statement -> assign .)
    STRING          reduce using rule 5 (statement -> assign .)
    LPAREN          reduce using rule 5 (statement -> assign .)
    ID              reduce using rule 5 (statement -> assign .)
    FLOATNUMBER     reduce using rule 5 (statement -> assign .)
    INTNUMBER       reduce using rule 5 (statement -> assign .)
    STRINGCONSTANT  reduce using rule 5 (statement -> assign .)
    LBRACK          reduce using rule 5 (statement -> assign .)
    LBRACE          reduce using rule 5 (statement -> assign .)
    $end            reduce using rule 5 (statement -> assign .)


state 28

    (35) expression -> STRING . LPAREN expression RPAREN

    LPAREN          shift and go to state 36


state 29

    (34) expression -> FLOAT . LPAREN expression RPAREN

    LPAREN          shift and go to state 45


state 30

    (33) expression -> INT . LPAREN expression RPAREN

    LPAREN          shift and go to state 34


state 31

    (30) expression -> SUBTRACT_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    SUBTRACT_OP     reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    MULTIPLY_OP     reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    DIVIDE_OP       reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    MODULO_OP       reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    EQ_OP           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    NE_OP           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    GT_OP           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    GE_OP           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    LT_OP           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    LE_OP           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    LOGAND_OP       reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    LOGOR_OP        reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    TILDE_OP        reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    QUESTION_OP     reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    SEP             reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    RPAREN          reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    COMMA           reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    RBRACK          reduce using rule 30 (expression -> SUBTRACT_OP expression .)
    COLON_OP        reduce using rule 30 (expression -> SUBTRACT_OP expression .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! MULTIPLY_OP     [ shift and go to state 66 ]
  ! DIVIDE_OP       [ shift and go to state 67 ]
  ! MODULO_OP       [ shift and go to state 62 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 32

    (75) arraydecl -> epsilon .

    ID              reduce using rule 75 (arraydecl -> epsilon .)


state 33

    (74) arraydecl -> LBRACK . RBRACK

    RBRACK          shift and go to state 69


state 34

    (33) expression -> INT LPAREN . expression RPAREN
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 70
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 35

    (71) typedecl -> INT arraydecl .

    ID              reduce using rule 71 (typedecl -> INT arraydecl .)


state 36

    (35) expression -> STRING LPAREN . expression RPAREN
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 71
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 37

    (73) typedecl -> STRING arraydecl .

    ID              reduce using rule 73 (typedecl -> STRING arraydecl .)


state 38

    (37) expression -> LPAREN expression . RPAREN
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    RPAREN          shift and go to state 72
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 39

    (42) subscript -> epsilon .

    SEP             reduce using rule 42 (subscript -> epsilon .)
    ADD_OP          reduce using rule 42 (subscript -> epsilon .)
    SUBTRACT_OP     reduce using rule 42 (subscript -> epsilon .)
    MULTIPLY_OP     reduce using rule 42 (subscript -> epsilon .)
    DIVIDE_OP       reduce using rule 42 (subscript -> epsilon .)
    MODULO_OP       reduce using rule 42 (subscript -> epsilon .)
    EQ_OP           reduce using rule 42 (subscript -> epsilon .)
    NE_OP           reduce using rule 42 (subscript -> epsilon .)
    GT_OP           reduce using rule 42 (subscript -> epsilon .)
    GE_OP           reduce using rule 42 (subscript -> epsilon .)
    LT_OP           reduce using rule 42 (subscript -> epsilon .)
    LE_OP           reduce using rule 42 (subscript -> epsilon .)
    LOGAND_OP       reduce using rule 42 (subscript -> epsilon .)
    LOGOR_OP        reduce using rule 42 (subscript -> epsilon .)
    TILDE_OP        reduce using rule 42 (subscript -> epsilon .)
    QUESTION_OP     reduce using rule 42 (subscript -> epsilon .)
    RPAREN          reduce using rule 42 (subscript -> epsilon .)
    COMMA           reduce using rule 42 (subscript -> epsilon .)
    RBRACK          reduce using rule 42 (subscript -> epsilon .)
    COLON_OP        reduce using rule 42 (subscript -> epsilon .)


state 40

    (41) subscript -> LBRACK . expression RBRACK
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 73
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 41

    (45) exprfuncall -> ID LPAREN . arglist RPAREN
    (46) arglist -> . expression argrest
    (47) arglist -> . epsilon
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (76) epsilon -> .
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    RPAREN          reduce using rule 76 (epsilon -> .)
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    exprfuncall                    shift and go to state 7
    scalarvalue                    shift and go to state 20
    epsilon                        shift and go to state 75
    arrayvalues                    shift and go to state 12
    arglist                        shift and go to state 74
    expression                     shift and go to state 76

state 42

    (40) expression -> ID subscript .

    ADD_OP          reduce using rule 40 (expression -> ID subscript .)
    SUBTRACT_OP     reduce using rule 40 (expression -> ID subscript .)
    MULTIPLY_OP     reduce using rule 40 (expression -> ID subscript .)
    DIVIDE_OP       reduce using rule 40 (expression -> ID subscript .)
    MODULO_OP       reduce using rule 40 (expression -> ID subscript .)
    EQ_OP           reduce using rule 40 (expression -> ID subscript .)
    NE_OP           reduce using rule 40 (expression -> ID subscript .)
    GT_OP           reduce using rule 40 (expression -> ID subscript .)
    GE_OP           reduce using rule 40 (expression -> ID subscript .)
    LT_OP           reduce using rule 40 (expression -> ID subscript .)
    LE_OP           reduce using rule 40 (expression -> ID subscript .)
    LOGAND_OP       reduce using rule 40 (expression -> ID subscript .)
    LOGOR_OP        reduce using rule 40 (expression -> ID subscript .)
    TILDE_OP        reduce using rule 40 (expression -> ID subscript .)
    QUESTION_OP     reduce using rule 40 (expression -> ID subscript .)
    SEP             reduce using rule 40 (expression -> ID subscript .)
    RPAREN          reduce using rule 40 (expression -> ID subscript .)
    COMMA           reduce using rule 40 (expression -> ID subscript .)
    RBRACK          reduce using rule 40 (expression -> ID subscript .)
    COLON_OP        reduce using rule 40 (expression -> ID subscript .)


state 43

    (50) exprparallel -> LBRACE LBRACE . parallelOp parallelFuncs RBRACE RBRACE
    (51) parallelOp -> . REDUCE reduceop reduceinit
    (52) parallelOp -> . COLLECT

    REDUCE          shift and go to state 78
    COLLECT         shift and go to state 79

    parallelOp                     shift and go to state 77

state 44

    (31) expression -> LOGNOT_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 31 (expression -> LOGNOT_OP expression .)
    SUBTRACT_OP     reduce using rule 31 (expression -> LOGNOT_OP expression .)
    MULTIPLY_OP     reduce using rule 31 (expression -> LOGNOT_OP expression .)
    DIVIDE_OP       reduce using rule 31 (expression -> LOGNOT_OP expression .)
    MODULO_OP       reduce using rule 31 (expression -> LOGNOT_OP expression .)
    EQ_OP           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    NE_OP           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    GT_OP           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    GE_OP           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    LT_OP           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    LE_OP           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    LOGAND_OP       reduce using rule 31 (expression -> LOGNOT_OP expression .)
    LOGOR_OP        reduce using rule 31 (expression -> LOGNOT_OP expression .)
    TILDE_OP        reduce using rule 31 (expression -> LOGNOT_OP expression .)
    QUESTION_OP     reduce using rule 31 (expression -> LOGNOT_OP expression .)
    SEP             reduce using rule 31 (expression -> LOGNOT_OP expression .)
    RPAREN          reduce using rule 31 (expression -> LOGNOT_OP expression .)
    COMMA           reduce using rule 31 (expression -> LOGNOT_OP expression .)
    RBRACK          reduce using rule 31 (expression -> LOGNOT_OP expression .)
    COLON_OP        reduce using rule 31 (expression -> LOGNOT_OP expression .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! MULTIPLY_OP     [ shift and go to state 66 ]
  ! DIVIDE_OP       [ shift and go to state 67 ]
  ! MODULO_OP       [ shift and go to state 62 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 45

    (34) expression -> FLOAT LPAREN . expression RPAREN
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 80
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 46

    (72) typedecl -> FLOAT arraydecl .

    ID              reduce using rule 72 (typedecl -> FLOAT arraydecl .)


state 47

    (68) arrayelements -> epsilon .

    RBRACK          reduce using rule 68 (arrayelements -> epsilon .)


state 48

    (66) arrayvalues -> LBRACK arrayelements . RBRACK

    RBRACK          shift and go to state 81


state 49

    (67) arrayelements -> expression . moreelements
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression
    (69) moreelements -> . COMMA expression moreelements
    (70) moreelements -> . epsilon
    (76) epsilon -> .

    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65
    COMMA           shift and go to state 84
    RBRACK          reduce using rule 76 (epsilon -> .)

    moreelements                   shift and go to state 82
    epsilon                        shift and go to state 83

state 50

    (9) varassign -> typedecl ID . ASSIGN_OP expression
    (10) funcassign -> typedecl ID . ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE

    ASSIGN_OP       shift and go to state 85


state 51

    (7) assign -> varassign SEP .

    RETURN          reduce using rule 7 (assign -> varassign SEP .)
    SUBTRACT_OP     reduce using rule 7 (assign -> varassign SEP .)
    LOGNOT_OP       reduce using rule 7 (assign -> varassign SEP .)
    LENGTH          reduce using rule 7 (assign -> varassign SEP .)
    INT             reduce using rule 7 (assign -> varassign SEP .)
    FLOAT           reduce using rule 7 (assign -> varassign SEP .)
    STRING          reduce using rule 7 (assign -> varassign SEP .)
    LPAREN          reduce using rule 7 (assign -> varassign SEP .)
    ID              reduce using rule 7 (assign -> varassign SEP .)
    FLOATNUMBER     reduce using rule 7 (assign -> varassign SEP .)
    INTNUMBER       reduce using rule 7 (assign -> varassign SEP .)
    STRINGCONSTANT  reduce using rule 7 (assign -> varassign SEP .)
    LBRACK          reduce using rule 7 (assign -> varassign SEP .)
    LBRACE          reduce using rule 7 (assign -> varassign SEP .)
    $end            reduce using rule 7 (assign -> varassign SEP .)


state 52

    (32) expression -> LENGTH LPAREN . ID RPAREN

    ID              shift and go to state 86


state 53

    (22) expression -> expression NE_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 87
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 54

    (23) expression -> expression GT_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 88
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 55

    (28) expression -> expression LOGOR_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 89
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 56

    (29) expression -> expression TILDE_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 90
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 57

    (6) statement -> expression SEP .

    RETURN          reduce using rule 6 (statement -> expression SEP .)
    SUBTRACT_OP     reduce using rule 6 (statement -> expression SEP .)
    LOGNOT_OP       reduce using rule 6 (statement -> expression SEP .)
    LENGTH          reduce using rule 6 (statement -> expression SEP .)
    INT             reduce using rule 6 (statement -> expression SEP .)
    FLOAT           reduce using rule 6 (statement -> expression SEP .)
    STRING          reduce using rule 6 (statement -> expression SEP .)
    LPAREN          reduce using rule 6 (statement -> expression SEP .)
    ID              reduce using rule 6 (statement -> expression SEP .)
    FLOATNUMBER     reduce using rule 6 (statement -> expression SEP .)
    INTNUMBER       reduce using rule 6 (statement -> expression SEP .)
    STRINGCONSTANT  reduce using rule 6 (statement -> expression SEP .)
    LBRACK          reduce using rule 6 (statement -> expression SEP .)
    LBRACE          reduce using rule 6 (statement -> expression SEP .)
    $end            reduce using rule 6 (statement -> expression SEP .)


state 58

    (27) expression -> expression LOGAND_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 91
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 59

    (17) expression -> expression SUBTRACT_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 92
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 60

    (25) expression -> expression LT_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 93
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 61

    (24) expression -> expression GE_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 94
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 62

    (20) expression -> expression MODULO_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 95
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 63

    (16) expression -> expression ADD_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 96
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 64

    (26) expression -> expression LE_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 97
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 65

    (36) expression -> expression QUESTION_OP . expression COLON_OP expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 98
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 66

    (18) expression -> expression MULTIPLY_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 99
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 67

    (19) expression -> expression DIVIDE_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 100
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 68

    (21) expression -> expression EQ_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 101
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 69

    (74) arraydecl -> LBRACK RBRACK .

    ID              reduce using rule 74 (arraydecl -> LBRACK RBRACK .)


state 70

    (33) expression -> INT LPAREN expression . RPAREN
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    RPAREN          shift and go to state 102
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 71

    (35) expression -> STRING LPAREN expression . RPAREN
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    RPAREN          shift and go to state 103
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 72

    (37) expression -> LPAREN expression RPAREN .

    ADD_OP          reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    SUBTRACT_OP     reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    MULTIPLY_OP     reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    DIVIDE_OP       reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    MODULO_OP       reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    NE_OP           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    GT_OP           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    GE_OP           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    LT_OP           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    LE_OP           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    LOGAND_OP       reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    LOGOR_OP        reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    TILDE_OP        reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    QUESTION_OP     reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    SEP             reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    COLON_OP        reduce using rule 37 (expression -> LPAREN expression RPAREN .)


state 73

    (41) subscript -> LBRACK expression . RBRACK
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    RBRACK          shift and go to state 104
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 74

    (45) exprfuncall -> ID LPAREN arglist . RPAREN

    RPAREN          shift and go to state 105


state 75

    (47) arglist -> epsilon .

    RPAREN          reduce using rule 47 (arglist -> epsilon .)


state 76

    (46) arglist -> expression . argrest
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression
    (48) argrest -> . argrest COMMA expression
    (49) argrest -> . epsilon
    (76) epsilon -> .

    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65
    COMMA           reduce using rule 76 (epsilon -> .)
    RPAREN          reduce using rule 76 (epsilon -> .)

    argrest                        shift and go to state 106
    epsilon                        shift and go to state 107

state 77

    (50) exprparallel -> LBRACE LBRACE parallelOp . parallelFuncs RBRACE RBRACE
    (58) parallelFuncs -> . exprfuncall SEP exprfuncall SEP parallelMoreFuncs
    (45) exprfuncall -> . ID LPAREN arglist RPAREN

    ID              shift and go to state 110

    parallelFuncs                  shift and go to state 108
    exprfuncall                    shift and go to state 109

state 78

    (51) parallelOp -> REDUCE . reduceop reduceinit
    (53) reduceop -> . ADD_OP
    (54) reduceop -> . SUBTRACT_OP
    (55) reduceop -> . MULTIPLY_OP
    (56) reduceop -> . DIVIDE_OP
    (57) reduceop -> . MODULO_OP

    ADD_OP          shift and go to state 114
    SUBTRACT_OP     shift and go to state 111
    MULTIPLY_OP     shift and go to state 115
    DIVIDE_OP       shift and go to state 116
    MODULO_OP       shift and go to state 113

    reduceop                       shift and go to state 112

state 79

    (52) parallelOp -> COLLECT .

    ID              reduce using rule 52 (parallelOp -> COLLECT .)


state 80

    (34) expression -> FLOAT LPAREN expression . RPAREN
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    RPAREN          shift and go to state 117
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 81

    (66) arrayvalues -> LBRACK arrayelements RBRACK .

    ADD_OP          reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    SUBTRACT_OP     reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    MULTIPLY_OP     reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    DIVIDE_OP       reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    MODULO_OP       reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    EQ_OP           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    NE_OP           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    GT_OP           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    GE_OP           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    LT_OP           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    LE_OP           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    LOGAND_OP       reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    LOGOR_OP        reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    TILDE_OP        reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    QUESTION_OP     reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    SEP             reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    RPAREN          reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    COMMA           reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    RBRACK          reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)
    COLON_OP        reduce using rule 66 (arrayvalues -> LBRACK arrayelements RBRACK .)


state 82

    (67) arrayelements -> expression moreelements .

    RBRACK          reduce using rule 67 (arrayelements -> expression moreelements .)


state 83

    (70) moreelements -> epsilon .

    RBRACK          reduce using rule 70 (moreelements -> epsilon .)


state 84

    (69) moreelements -> COMMA . expression moreelements
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    scalarvalue                    shift and go to state 20
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    expression                     shift and go to state 118

state 85

    (9) varassign -> typedecl ID ASSIGN_OP . expression
    (10) funcassign -> typedecl ID ASSIGN_OP . FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    FUNCTION        shift and go to state 119
    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    scalarvalue                    shift and go to state 20
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    expression                     shift and go to state 120

state 86

    (32) expression -> LENGTH LPAREN ID . RPAREN

    RPAREN          shift and go to state 121


state 87

    (22) expression -> expression NE_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    EQ_OP           reduce using rule 22 (expression -> expression NE_OP expression .)
    NE_OP           reduce using rule 22 (expression -> expression NE_OP expression .)
    GT_OP           reduce using rule 22 (expression -> expression NE_OP expression .)
    GE_OP           reduce using rule 22 (expression -> expression NE_OP expression .)
    LT_OP           reduce using rule 22 (expression -> expression NE_OP expression .)
    LE_OP           reduce using rule 22 (expression -> expression NE_OP expression .)
    LOGAND_OP       reduce using rule 22 (expression -> expression NE_OP expression .)
    LOGOR_OP        reduce using rule 22 (expression -> expression NE_OP expression .)
    TILDE_OP        reduce using rule 22 (expression -> expression NE_OP expression .)
    QUESTION_OP     reduce using rule 22 (expression -> expression NE_OP expression .)
    SEP             reduce using rule 22 (expression -> expression NE_OP expression .)
    RPAREN          reduce using rule 22 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 22 (expression -> expression NE_OP expression .)
    RBRACK          reduce using rule 22 (expression -> expression NE_OP expression .)
    COLON_OP        reduce using rule 22 (expression -> expression NE_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! ADD_OP          [ reduce using rule 22 (expression -> expression NE_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 22 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 22 (expression -> expression NE_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 22 (expression -> expression NE_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 22 (expression -> expression NE_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 88

    (23) expression -> expression GT_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    EQ_OP           reduce using rule 23 (expression -> expression GT_OP expression .)
    NE_OP           reduce using rule 23 (expression -> expression GT_OP expression .)
    GT_OP           reduce using rule 23 (expression -> expression GT_OP expression .)
    GE_OP           reduce using rule 23 (expression -> expression GT_OP expression .)
    LT_OP           reduce using rule 23 (expression -> expression GT_OP expression .)
    LE_OP           reduce using rule 23 (expression -> expression GT_OP expression .)
    LOGAND_OP       reduce using rule 23 (expression -> expression GT_OP expression .)
    LOGOR_OP        reduce using rule 23 (expression -> expression GT_OP expression .)
    TILDE_OP        reduce using rule 23 (expression -> expression GT_OP expression .)
    QUESTION_OP     reduce using rule 23 (expression -> expression GT_OP expression .)
    SEP             reduce using rule 23 (expression -> expression GT_OP expression .)
    RPAREN          reduce using rule 23 (expression -> expression GT_OP expression .)
    COMMA           reduce using rule 23 (expression -> expression GT_OP expression .)
    RBRACK          reduce using rule 23 (expression -> expression GT_OP expression .)
    COLON_OP        reduce using rule 23 (expression -> expression GT_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! ADD_OP          [ reduce using rule 23 (expression -> expression GT_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 23 (expression -> expression GT_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 23 (expression -> expression GT_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 23 (expression -> expression GT_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 23 (expression -> expression GT_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 89

    (28) expression -> expression LOGOR_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    LOGOR_OP        reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    TILDE_OP        reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    QUESTION_OP     reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    SEP             reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    RPAREN          reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    COMMA           reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    RBRACK          reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    COLON_OP        reduce using rule 28 (expression -> expression LOGOR_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58

  ! ADD_OP          [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! NE_OP           [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! GT_OP           [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! GE_OP           [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! LT_OP           [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! LE_OP           [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! LOGAND_OP       [ reduce using rule 28 (expression -> expression LOGOR_OP expression .) ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 90

    (29) expression -> expression TILDE_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    TILDE_OP        reduce using rule 29 (expression -> expression TILDE_OP expression .)
    SEP             reduce using rule 29 (expression -> expression TILDE_OP expression .)
    RPAREN          reduce using rule 29 (expression -> expression TILDE_OP expression .)
    COMMA           reduce using rule 29 (expression -> expression TILDE_OP expression .)
    RBRACK          reduce using rule 29 (expression -> expression TILDE_OP expression .)
    COLON_OP        reduce using rule 29 (expression -> expression TILDE_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    QUESTION_OP     shift and go to state 65

  ! ADD_OP          [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! EQ_OP           [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! NE_OP           [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! GT_OP           [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! GE_OP           [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! LT_OP           [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! LE_OP           [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! LOGAND_OP       [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! LOGOR_OP        [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! QUESTION_OP     [ reduce using rule 29 (expression -> expression TILDE_OP expression .) ]
  ! TILDE_OP        [ shift and go to state 56 ]


state 91

    (27) expression -> expression LOGAND_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    LOGAND_OP       reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    LOGOR_OP        reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    TILDE_OP        reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    QUESTION_OP     reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    SEP             reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    RPAREN          reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    COMMA           reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    RBRACK          reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    COLON_OP        reduce using rule 27 (expression -> expression LOGAND_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64

  ! ADD_OP          [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! NE_OP           [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! GT_OP           [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! GE_OP           [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! LT_OP           [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! LE_OP           [ reduce using rule 27 (expression -> expression LOGAND_OP expression .) ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 92

    (17) expression -> expression SUBTRACT_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    SUBTRACT_OP     reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    EQ_OP           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    NE_OP           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    GT_OP           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    GE_OP           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    LT_OP           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    LE_OP           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    LOGAND_OP       reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    LOGOR_OP        reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    TILDE_OP        reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    QUESTION_OP     reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    SEP             reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    RPAREN          reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    COMMA           reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    RBRACK          reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    COLON_OP        reduce using rule 17 (expression -> expression SUBTRACT_OP expression .)
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! MULTIPLY_OP     [ reduce using rule 17 (expression -> expression SUBTRACT_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 17 (expression -> expression SUBTRACT_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 17 (expression -> expression SUBTRACT_OP expression .) ]
  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 93

    (25) expression -> expression LT_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    EQ_OP           reduce using rule 25 (expression -> expression LT_OP expression .)
    NE_OP           reduce using rule 25 (expression -> expression LT_OP expression .)
    GT_OP           reduce using rule 25 (expression -> expression LT_OP expression .)
    GE_OP           reduce using rule 25 (expression -> expression LT_OP expression .)
    LT_OP           reduce using rule 25 (expression -> expression LT_OP expression .)
    LE_OP           reduce using rule 25 (expression -> expression LT_OP expression .)
    LOGAND_OP       reduce using rule 25 (expression -> expression LT_OP expression .)
    LOGOR_OP        reduce using rule 25 (expression -> expression LT_OP expression .)
    TILDE_OP        reduce using rule 25 (expression -> expression LT_OP expression .)
    QUESTION_OP     reduce using rule 25 (expression -> expression LT_OP expression .)
    SEP             reduce using rule 25 (expression -> expression LT_OP expression .)
    RPAREN          reduce using rule 25 (expression -> expression LT_OP expression .)
    COMMA           reduce using rule 25 (expression -> expression LT_OP expression .)
    RBRACK          reduce using rule 25 (expression -> expression LT_OP expression .)
    COLON_OP        reduce using rule 25 (expression -> expression LT_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! ADD_OP          [ reduce using rule 25 (expression -> expression LT_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 25 (expression -> expression LT_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 25 (expression -> expression LT_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 25 (expression -> expression LT_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 25 (expression -> expression LT_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 94

    (24) expression -> expression GE_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    EQ_OP           reduce using rule 24 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 24 (expression -> expression GE_OP expression .)
    GT_OP           reduce using rule 24 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 24 (expression -> expression GE_OP expression .)
    LT_OP           reduce using rule 24 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 24 (expression -> expression GE_OP expression .)
    LOGAND_OP       reduce using rule 24 (expression -> expression GE_OP expression .)
    LOGOR_OP        reduce using rule 24 (expression -> expression GE_OP expression .)
    TILDE_OP        reduce using rule 24 (expression -> expression GE_OP expression .)
    QUESTION_OP     reduce using rule 24 (expression -> expression GE_OP expression .)
    SEP             reduce using rule 24 (expression -> expression GE_OP expression .)
    RPAREN          reduce using rule 24 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 24 (expression -> expression GE_OP expression .)
    RBRACK          reduce using rule 24 (expression -> expression GE_OP expression .)
    COLON_OP        reduce using rule 24 (expression -> expression GE_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! ADD_OP          [ reduce using rule 24 (expression -> expression GE_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 24 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 24 (expression -> expression GE_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 24 (expression -> expression GE_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 24 (expression -> expression GE_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 95

    (20) expression -> expression MODULO_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 20 (expression -> expression MODULO_OP expression .)
    SUBTRACT_OP     reduce using rule 20 (expression -> expression MODULO_OP expression .)
    MULTIPLY_OP     reduce using rule 20 (expression -> expression MODULO_OP expression .)
    DIVIDE_OP       reduce using rule 20 (expression -> expression MODULO_OP expression .)
    MODULO_OP       reduce using rule 20 (expression -> expression MODULO_OP expression .)
    EQ_OP           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    NE_OP           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    GT_OP           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    GE_OP           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    LT_OP           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    LE_OP           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    LOGAND_OP       reduce using rule 20 (expression -> expression MODULO_OP expression .)
    LOGOR_OP        reduce using rule 20 (expression -> expression MODULO_OP expression .)
    TILDE_OP        reduce using rule 20 (expression -> expression MODULO_OP expression .)
    QUESTION_OP     reduce using rule 20 (expression -> expression MODULO_OP expression .)
    SEP             reduce using rule 20 (expression -> expression MODULO_OP expression .)
    RPAREN          reduce using rule 20 (expression -> expression MODULO_OP expression .)
    COMMA           reduce using rule 20 (expression -> expression MODULO_OP expression .)
    RBRACK          reduce using rule 20 (expression -> expression MODULO_OP expression .)
    COLON_OP        reduce using rule 20 (expression -> expression MODULO_OP expression .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! MULTIPLY_OP     [ shift and go to state 66 ]
  ! DIVIDE_OP       [ shift and go to state 67 ]
  ! MODULO_OP       [ shift and go to state 62 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 96

    (16) expression -> expression ADD_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 16 (expression -> expression ADD_OP expression .)
    SUBTRACT_OP     reduce using rule 16 (expression -> expression ADD_OP expression .)
    EQ_OP           reduce using rule 16 (expression -> expression ADD_OP expression .)
    NE_OP           reduce using rule 16 (expression -> expression ADD_OP expression .)
    GT_OP           reduce using rule 16 (expression -> expression ADD_OP expression .)
    GE_OP           reduce using rule 16 (expression -> expression ADD_OP expression .)
    LT_OP           reduce using rule 16 (expression -> expression ADD_OP expression .)
    LE_OP           reduce using rule 16 (expression -> expression ADD_OP expression .)
    LOGAND_OP       reduce using rule 16 (expression -> expression ADD_OP expression .)
    LOGOR_OP        reduce using rule 16 (expression -> expression ADD_OP expression .)
    TILDE_OP        reduce using rule 16 (expression -> expression ADD_OP expression .)
    QUESTION_OP     reduce using rule 16 (expression -> expression ADD_OP expression .)
    SEP             reduce using rule 16 (expression -> expression ADD_OP expression .)
    RPAREN          reduce using rule 16 (expression -> expression ADD_OP expression .)
    COMMA           reduce using rule 16 (expression -> expression ADD_OP expression .)
    RBRACK          reduce using rule 16 (expression -> expression ADD_OP expression .)
    COLON_OP        reduce using rule 16 (expression -> expression ADD_OP expression .)
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! MULTIPLY_OP     [ reduce using rule 16 (expression -> expression ADD_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 16 (expression -> expression ADD_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 16 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 97

    (26) expression -> expression LE_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    EQ_OP           reduce using rule 26 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 26 (expression -> expression LE_OP expression .)
    GT_OP           reduce using rule 26 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 26 (expression -> expression LE_OP expression .)
    LT_OP           reduce using rule 26 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 26 (expression -> expression LE_OP expression .)
    LOGAND_OP       reduce using rule 26 (expression -> expression LE_OP expression .)
    LOGOR_OP        reduce using rule 26 (expression -> expression LE_OP expression .)
    TILDE_OP        reduce using rule 26 (expression -> expression LE_OP expression .)
    QUESTION_OP     reduce using rule 26 (expression -> expression LE_OP expression .)
    SEP             reduce using rule 26 (expression -> expression LE_OP expression .)
    RPAREN          reduce using rule 26 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 26 (expression -> expression LE_OP expression .)
    RBRACK          reduce using rule 26 (expression -> expression LE_OP expression .)
    COLON_OP        reduce using rule 26 (expression -> expression LE_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! ADD_OP          [ reduce using rule 26 (expression -> expression LE_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 26 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 26 (expression -> expression LE_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 26 (expression -> expression LE_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 26 (expression -> expression LE_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 98

    (36) expression -> expression QUESTION_OP expression . COLON_OP expression
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    COLON_OP        shift and go to state 122
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 99

    (18) expression -> expression MULTIPLY_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    SUBTRACT_OP     reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    MULTIPLY_OP     reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    DIVIDE_OP       reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    MODULO_OP       reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    EQ_OP           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    NE_OP           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    GT_OP           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    GE_OP           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    LT_OP           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    LE_OP           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    LOGAND_OP       reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    LOGOR_OP        reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    TILDE_OP        reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    QUESTION_OP     reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    SEP             reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    RPAREN          reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    COMMA           reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    RBRACK          reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)
    COLON_OP        reduce using rule 18 (expression -> expression MULTIPLY_OP expression .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! MULTIPLY_OP     [ shift and go to state 66 ]
  ! DIVIDE_OP       [ shift and go to state 67 ]
  ! MODULO_OP       [ shift and go to state 62 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 100

    (19) expression -> expression DIVIDE_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    ADD_OP          reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    SUBTRACT_OP     reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    MULTIPLY_OP     reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    DIVIDE_OP       reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    MODULO_OP       reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    EQ_OP           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    NE_OP           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    GT_OP           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    GE_OP           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    LT_OP           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    LE_OP           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    LOGAND_OP       reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    LOGOR_OP        reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    TILDE_OP        reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    QUESTION_OP     reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    SEP             reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    RPAREN          reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    COMMA           reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    RBRACK          reduce using rule 19 (expression -> expression DIVIDE_OP expression .)
    COLON_OP        reduce using rule 19 (expression -> expression DIVIDE_OP expression .)

  ! ADD_OP          [ shift and go to state 63 ]
  ! SUBTRACT_OP     [ shift and go to state 59 ]
  ! MULTIPLY_OP     [ shift and go to state 66 ]
  ! DIVIDE_OP       [ shift and go to state 67 ]
  ! MODULO_OP       [ shift and go to state 62 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 101

    (21) expression -> expression EQ_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    EQ_OP           reduce using rule 21 (expression -> expression EQ_OP expression .)
    NE_OP           reduce using rule 21 (expression -> expression EQ_OP expression .)
    GT_OP           reduce using rule 21 (expression -> expression EQ_OP expression .)
    GE_OP           reduce using rule 21 (expression -> expression EQ_OP expression .)
    LT_OP           reduce using rule 21 (expression -> expression EQ_OP expression .)
    LE_OP           reduce using rule 21 (expression -> expression EQ_OP expression .)
    LOGAND_OP       reduce using rule 21 (expression -> expression EQ_OP expression .)
    LOGOR_OP        reduce using rule 21 (expression -> expression EQ_OP expression .)
    TILDE_OP        reduce using rule 21 (expression -> expression EQ_OP expression .)
    QUESTION_OP     reduce using rule 21 (expression -> expression EQ_OP expression .)
    SEP             reduce using rule 21 (expression -> expression EQ_OP expression .)
    RPAREN          reduce using rule 21 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 21 (expression -> expression EQ_OP expression .)
    RBRACK          reduce using rule 21 (expression -> expression EQ_OP expression .)
    COLON_OP        reduce using rule 21 (expression -> expression EQ_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62

  ! ADD_OP          [ reduce using rule 21 (expression -> expression EQ_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 21 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 21 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 21 (expression -> expression EQ_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 21 (expression -> expression EQ_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 53 ]
  ! GT_OP           [ shift and go to state 54 ]
  ! GE_OP           [ shift and go to state 61 ]
  ! LT_OP           [ shift and go to state 60 ]
  ! LE_OP           [ shift and go to state 64 ]
  ! LOGAND_OP       [ shift and go to state 58 ]
  ! LOGOR_OP        [ shift and go to state 55 ]
  ! TILDE_OP        [ shift and go to state 56 ]
  ! QUESTION_OP     [ shift and go to state 65 ]


state 102

    (33) expression -> INT LPAREN expression RPAREN .

    ADD_OP          reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    SUBTRACT_OP     reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    MULTIPLY_OP     reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    DIVIDE_OP       reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    MODULO_OP       reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    NE_OP           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    GT_OP           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    GE_OP           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    LT_OP           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    LE_OP           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    LOGAND_OP       reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    LOGOR_OP        reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    TILDE_OP        reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    QUESTION_OP     reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    SEP             reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    COMMA           reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    RBRACK          reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)
    COLON_OP        reduce using rule 33 (expression -> INT LPAREN expression RPAREN .)


state 103

    (35) expression -> STRING LPAREN expression RPAREN .

    ADD_OP          reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    SUBTRACT_OP     reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    MULTIPLY_OP     reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    DIVIDE_OP       reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    MODULO_OP       reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    NE_OP           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    GT_OP           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    GE_OP           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    LT_OP           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    LE_OP           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    LOGAND_OP       reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    LOGOR_OP        reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    TILDE_OP        reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    QUESTION_OP     reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    SEP             reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    RPAREN          reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    COMMA           reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    RBRACK          reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)
    COLON_OP        reduce using rule 35 (expression -> STRING LPAREN expression RPAREN .)


state 104

    (41) subscript -> LBRACK expression RBRACK .

    SEP             reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    ADD_OP          reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    SUBTRACT_OP     reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    MULTIPLY_OP     reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    DIVIDE_OP       reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    MODULO_OP       reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    EQ_OP           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    NE_OP           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    GT_OP           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    GE_OP           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    LT_OP           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    LE_OP           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    LOGAND_OP       reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    LOGOR_OP        reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    TILDE_OP        reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    QUESTION_OP     reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    RPAREN          reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    COMMA           reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    RBRACK          reduce using rule 41 (subscript -> LBRACK expression RBRACK .)
    COLON_OP        reduce using rule 41 (subscript -> LBRACK expression RBRACK .)


state 105

    (45) exprfuncall -> ID LPAREN arglist RPAREN .

    RPAREN          reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    ADD_OP          reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    SUBTRACT_OP     reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    MULTIPLY_OP     reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    DIVIDE_OP       reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    MODULO_OP       reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    EQ_OP           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    NE_OP           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    GT_OP           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    GE_OP           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    LT_OP           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    LE_OP           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    LOGAND_OP       reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    LOGOR_OP        reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    TILDE_OP        reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    QUESTION_OP     reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    COMMA           reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    RBRACK          reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    SEP             reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)
    COLON_OP        reduce using rule 45 (exprfuncall -> ID LPAREN arglist RPAREN .)


state 106

    (46) arglist -> expression argrest .
    (48) argrest -> argrest . COMMA expression

    RPAREN          reduce using rule 46 (arglist -> expression argrest .)
    COMMA           shift and go to state 123


state 107

    (49) argrest -> epsilon .

    COMMA           reduce using rule 49 (argrest -> epsilon .)
    RPAREN          reduce using rule 49 (argrest -> epsilon .)


state 108

    (50) exprparallel -> LBRACE LBRACE parallelOp parallelFuncs . RBRACE RBRACE

    RBRACE          shift and go to state 124


state 109

    (58) parallelFuncs -> exprfuncall . SEP exprfuncall SEP parallelMoreFuncs

    SEP             shift and go to state 125


state 110

    (45) exprfuncall -> ID . LPAREN arglist RPAREN

    LPAREN          shift and go to state 41


state 111

    (54) reduceop -> SUBTRACT_OP .

    FLOATNUMBER     reduce using rule 54 (reduceop -> SUBTRACT_OP .)
    INTNUMBER       reduce using rule 54 (reduceop -> SUBTRACT_OP .)
    STRINGCONSTANT  reduce using rule 54 (reduceop -> SUBTRACT_OP .)
    ID              reduce using rule 54 (reduceop -> SUBTRACT_OP .)


state 112

    (51) parallelOp -> REDUCE reduceop . reduceinit
    (61) reduceinit -> . scalarvalue
    (62) reduceinit -> . epsilon
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (76) epsilon -> .

    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 127
    scalarvalue                    shift and go to state 128
    reduceinit                     shift and go to state 126

state 113

    (57) reduceop -> MODULO_OP .

    FLOATNUMBER     reduce using rule 57 (reduceop -> MODULO_OP .)
    INTNUMBER       reduce using rule 57 (reduceop -> MODULO_OP .)
    STRINGCONSTANT  reduce using rule 57 (reduceop -> MODULO_OP .)
    ID              reduce using rule 57 (reduceop -> MODULO_OP .)


state 114

    (53) reduceop -> ADD_OP .

    FLOATNUMBER     reduce using rule 53 (reduceop -> ADD_OP .)
    INTNUMBER       reduce using rule 53 (reduceop -> ADD_OP .)
    STRINGCONSTANT  reduce using rule 53 (reduceop -> ADD_OP .)
    ID              reduce using rule 53 (reduceop -> ADD_OP .)


state 115

    (55) reduceop -> MULTIPLY_OP .

    FLOATNUMBER     reduce using rule 55 (reduceop -> MULTIPLY_OP .)
    INTNUMBER       reduce using rule 55 (reduceop -> MULTIPLY_OP .)
    STRINGCONSTANT  reduce using rule 55 (reduceop -> MULTIPLY_OP .)
    ID              reduce using rule 55 (reduceop -> MULTIPLY_OP .)


state 116

    (56) reduceop -> DIVIDE_OP .

    FLOATNUMBER     reduce using rule 56 (reduceop -> DIVIDE_OP .)
    INTNUMBER       reduce using rule 56 (reduceop -> DIVIDE_OP .)
    STRINGCONSTANT  reduce using rule 56 (reduceop -> DIVIDE_OP .)
    ID              reduce using rule 56 (reduceop -> DIVIDE_OP .)


state 117

    (34) expression -> FLOAT LPAREN expression RPAREN .

    ADD_OP          reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    SUBTRACT_OP     reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    MULTIPLY_OP     reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    DIVIDE_OP       reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    MODULO_OP       reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    NE_OP           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    GT_OP           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    GE_OP           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    LT_OP           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    LE_OP           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    LOGAND_OP       reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    LOGOR_OP        reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    TILDE_OP        reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    QUESTION_OP     reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    SEP             reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    COMMA           reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    RBRACK          reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)
    COLON_OP        reduce using rule 34 (expression -> FLOAT LPAREN expression RPAREN .)


state 118

    (69) moreelements -> COMMA expression . moreelements
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression
    (69) moreelements -> . COMMA expression moreelements
    (70) moreelements -> . epsilon
    (76) epsilon -> .

    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65
    COMMA           shift and go to state 84
    RBRACK          reduce using rule 76 (epsilon -> .)

    moreelements                   shift and go to state 129
    epsilon                        shift and go to state 83

state 119

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION . LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE

    LPAREN          shift and go to state 130


state 120

    (9) varassign -> typedecl ID ASSIGN_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    SEP             reduce using rule 9 (varassign -> typedecl ID ASSIGN_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 121

    (32) expression -> LENGTH LPAREN ID RPAREN .

    ADD_OP          reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    SUBTRACT_OP     reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    MULTIPLY_OP     reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    DIVIDE_OP       reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    MODULO_OP       reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    EQ_OP           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    NE_OP           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    GT_OP           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    GE_OP           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    LT_OP           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    LE_OP           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    LOGAND_OP       reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    LOGOR_OP        reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    TILDE_OP        reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    QUESTION_OP     reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    SEP             reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    RPAREN          reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    COMMA           reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    RBRACK          reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)
    COLON_OP        reduce using rule 32 (expression -> LENGTH LPAREN ID RPAREN .)


state 122

    (36) expression -> expression QUESTION_OP expression COLON_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 131
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 123

    (48) argrest -> argrest COMMA . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    scalarvalue                    shift and go to state 20
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    expression                     shift and go to state 132

state 124

    (50) exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE . RBRACE

    RBRACE          shift and go to state 133


state 125

    (58) parallelFuncs -> exprfuncall SEP . exprfuncall SEP parallelMoreFuncs
    (45) exprfuncall -> . ID LPAREN arglist RPAREN

    ID              shift and go to state 110

    exprfuncall                    shift and go to state 134

state 126

    (51) parallelOp -> REDUCE reduceop reduceinit .

    ID              reduce using rule 51 (parallelOp -> REDUCE reduceop reduceinit .)


state 127

    (62) reduceinit -> epsilon .

    ID              reduce using rule 62 (reduceinit -> epsilon .)


state 128

    (61) reduceinit -> scalarvalue .

    ID              reduce using rule 61 (reduceinit -> scalarvalue .)


state 129

    (69) moreelements -> COMMA expression moreelements .

    RBRACK          reduce using rule 69 (moreelements -> COMMA expression moreelements .)


state 130

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN . paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE
    (12) paramlist -> . typedecl ID paramrest
    (13) paramlist -> . epsilon
    (71) typedecl -> . INT arraydecl
    (72) typedecl -> . FLOAT arraydecl
    (73) typedecl -> . STRING arraydecl
    (76) epsilon -> .

    INT             shift and go to state 139
    FLOAT           shift and go to state 138
    STRING          shift and go to state 140
    RPAREN          reduce using rule 76 (epsilon -> .)

    typedecl                       shift and go to state 135
    epsilon                        shift and go to state 137
    paramlist                      shift and go to state 136

state 131

    (36) expression -> expression QUESTION_OP expression COLON_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    TILDE_OP        reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .)
    SEP             reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .)
    RPAREN          reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .)
    COMMA           reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .)
    RBRACK          reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .)
    COLON_OP        reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    QUESTION_OP     shift and go to state 65

  ! ADD_OP          [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! SUBTRACT_OP     [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! MULTIPLY_OP     [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! DIVIDE_OP       [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! MODULO_OP       [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! EQ_OP           [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! NE_OP           [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! GT_OP           [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! GE_OP           [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! LT_OP           [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! LE_OP           [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! LOGAND_OP       [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! LOGOR_OP        [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! QUESTION_OP     [ reduce using rule 36 (expression -> expression QUESTION_OP expression COLON_OP expression .) ]
  ! TILDE_OP        [ shift and go to state 56 ]


state 132

    (48) argrest -> argrest COMMA expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    COMMA           reduce using rule 48 (argrest -> argrest COMMA expression .)
    RPAREN          reduce using rule 48 (argrest -> argrest COMMA expression .)
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 133

    (50) exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .

    ADD_OP          reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    SUBTRACT_OP     reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    MULTIPLY_OP     reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    DIVIDE_OP       reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    MODULO_OP       reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    EQ_OP           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    NE_OP           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    GT_OP           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    GE_OP           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    LT_OP           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    LE_OP           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    LOGAND_OP       reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    LOGOR_OP        reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    TILDE_OP        reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    QUESTION_OP     reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    SEP             reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    RPAREN          reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    COMMA           reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    RBRACK          reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)
    COLON_OP        reduce using rule 50 (exprparallel -> LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE .)


state 134

    (58) parallelFuncs -> exprfuncall SEP exprfuncall . SEP parallelMoreFuncs

    SEP             shift and go to state 141


state 135

    (12) paramlist -> typedecl . ID paramrest

    ID              shift and go to state 142


state 136

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist . pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE
    (11) pushToSymTable -> . epsilon
    (76) epsilon -> .

    RPAREN          reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 143
    pushToSymTable                 shift and go to state 144

state 137

    (13) paramlist -> epsilon .

    RPAREN          reduce using rule 13 (paramlist -> epsilon .)


state 138

    (72) typedecl -> FLOAT . arraydecl
    (74) arraydecl -> . LBRACK RBRACK
    (75) arraydecl -> . epsilon
    (76) epsilon -> .

    LBRACK          shift and go to state 33
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 32
    arraydecl                      shift and go to state 46

state 139

    (71) typedecl -> INT . arraydecl
    (74) arraydecl -> . LBRACK RBRACK
    (75) arraydecl -> . epsilon
    (76) epsilon -> .

    LBRACK          shift and go to state 33
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 32
    arraydecl                      shift and go to state 35

state 140

    (73) typedecl -> STRING . arraydecl
    (74) arraydecl -> . LBRACK RBRACK
    (75) arraydecl -> . epsilon
    (76) epsilon -> .

    LBRACK          shift and go to state 33
    ID              reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 32
    arraydecl                      shift and go to state 37

state 141

    (58) parallelFuncs -> exprfuncall SEP exprfuncall SEP . parallelMoreFuncs
    (59) parallelMoreFuncs -> . parallelMoreFuncs exprfuncall SEP
    (60) parallelMoreFuncs -> . epsilon
    (76) epsilon -> .

    ID              reduce using rule 76 (epsilon -> .)
    RBRACE          reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 145
    parallelMoreFuncs              shift and go to state 146

state 142

    (12) paramlist -> typedecl ID . paramrest
    (14) paramrest -> . paramrest COMMA typedecl ID
    (15) paramrest -> . epsilon
    (76) epsilon -> .

    COMMA           reduce using rule 76 (epsilon -> .)
    RPAREN          reduce using rule 76 (epsilon -> .)

    paramrest                      shift and go to state 147
    epsilon                        shift and go to state 148

state 143

    (11) pushToSymTable -> epsilon .

    RPAREN          reduce using rule 11 (pushToSymTable -> epsilon .)


state 144

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable . RPAREN LBRACE stmtrest RETURN expression SEP RBRACE

    RPAREN          shift and go to state 149


state 145

    (60) parallelMoreFuncs -> epsilon .

    ID              reduce using rule 60 (parallelMoreFuncs -> epsilon .)
    RBRACE          reduce using rule 60 (parallelMoreFuncs -> epsilon .)


state 146

    (58) parallelFuncs -> exprfuncall SEP exprfuncall SEP parallelMoreFuncs .
    (59) parallelMoreFuncs -> parallelMoreFuncs . exprfuncall SEP
    (45) exprfuncall -> . ID LPAREN arglist RPAREN

    RBRACE          reduce using rule 58 (parallelFuncs -> exprfuncall SEP exprfuncall SEP parallelMoreFuncs .)
    ID              shift and go to state 110

    exprfuncall                    shift and go to state 150

state 147

    (12) paramlist -> typedecl ID paramrest .
    (14) paramrest -> paramrest . COMMA typedecl ID

    RPAREN          reduce using rule 12 (paramlist -> typedecl ID paramrest .)
    COMMA           shift and go to state 151


state 148

    (15) paramrest -> epsilon .

    COMMA           reduce using rule 15 (paramrest -> epsilon .)
    RPAREN          reduce using rule 15 (paramrest -> epsilon .)


state 149

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN . LBRACE stmtrest RETURN expression SEP RBRACE

    LBRACE          shift and go to state 152


state 150

    (59) parallelMoreFuncs -> parallelMoreFuncs exprfuncall . SEP

    SEP             shift and go to state 153


state 151

    (14) paramrest -> paramrest COMMA . typedecl ID
    (71) typedecl -> . INT arraydecl
    (72) typedecl -> . FLOAT arraydecl
    (73) typedecl -> . STRING arraydecl

    INT             shift and go to state 139
    FLOAT           shift and go to state 138
    STRING          shift and go to state 140

    typedecl                       shift and go to state 154

state 152

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE . stmtrest RETURN expression SEP RBRACE
    (3) stmtrest -> . stmtrest statement
    (4) stmtrest -> . epsilon
    (76) epsilon -> .

    RETURN          reduce using rule 76 (epsilon -> .)
    SUBTRACT_OP     reduce using rule 76 (epsilon -> .)
    LOGNOT_OP       reduce using rule 76 (epsilon -> .)
    LENGTH          reduce using rule 76 (epsilon -> .)
    INT             reduce using rule 76 (epsilon -> .)
    FLOAT           reduce using rule 76 (epsilon -> .)
    STRING          reduce using rule 76 (epsilon -> .)
    LPAREN          reduce using rule 76 (epsilon -> .)
    ID              reduce using rule 76 (epsilon -> .)
    FLOATNUMBER     reduce using rule 76 (epsilon -> .)
    INTNUMBER       reduce using rule 76 (epsilon -> .)
    STRINGCONSTANT  reduce using rule 76 (epsilon -> .)
    LBRACK          reduce using rule 76 (epsilon -> .)
    LBRACE          reduce using rule 76 (epsilon -> .)

    epsilon                        shift and go to state 1
    stmtrest                       shift and go to state 155

state 153

    (59) parallelMoreFuncs -> parallelMoreFuncs exprfuncall SEP .

    ID              reduce using rule 59 (parallelMoreFuncs -> parallelMoreFuncs exprfuncall SEP .)
    RBRACE          reduce using rule 59 (parallelMoreFuncs -> parallelMoreFuncs exprfuncall SEP .)


state 154

    (14) paramrest -> paramrest COMMA typedecl . ID

    ID              shift and go to state 156


state 155

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest . RETURN expression SEP RBRACE
    (3) stmtrest -> stmtrest . statement
    (5) statement -> . assign
    (6) statement -> . expression SEP
    (7) assign -> . varassign SEP
    (8) assign -> . funcassign
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (9) varassign -> . typedecl ID ASSIGN_OP expression
    (10) funcassign -> . typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE
    (71) typedecl -> . INT arraydecl
    (72) typedecl -> . FLOAT arraydecl
    (73) typedecl -> . STRING arraydecl

    RETURN          shift and go to state 157
    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 13
    FLOAT           shift and go to state 21
    STRING          shift and go to state 14
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    typedecl                       shift and go to state 23
    exprparallel                   shift and go to state 6
    scalarvalue                    shift and go to state 20
    exprfuncall                    shift and go to state 7
    varassign                      shift and go to state 24
    statement                      shift and go to state 158
    arrayvalues                    shift and go to state 12
    expression                     shift and go to state 26
    assign                         shift and go to state 27
    funcassign                     shift and go to state 17

state 156

    (14) paramrest -> paramrest COMMA typedecl ID .

    COMMA           reduce using rule 14 (paramrest -> paramrest COMMA typedecl ID .)
    RPAREN          reduce using rule 14 (paramrest -> paramrest COMMA typedecl ID .)


state 157

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN . expression SEP RBRACE
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression SUBTRACT_OP expression
    (18) expression -> . expression MULTIPLY_OP expression
    (19) expression -> . expression DIVIDE_OP expression
    (20) expression -> . expression MODULO_OP expression
    (21) expression -> . expression EQ_OP expression
    (22) expression -> . expression NE_OP expression
    (23) expression -> . expression GT_OP expression
    (24) expression -> . expression GE_OP expression
    (25) expression -> . expression LT_OP expression
    (26) expression -> . expression LE_OP expression
    (27) expression -> . expression LOGAND_OP expression
    (28) expression -> . expression LOGOR_OP expression
    (29) expression -> . expression TILDE_OP expression
    (30) expression -> . SUBTRACT_OP expression
    (31) expression -> . LOGNOT_OP expression
    (32) expression -> . LENGTH LPAREN ID RPAREN
    (33) expression -> . INT LPAREN expression RPAREN
    (34) expression -> . FLOAT LPAREN expression RPAREN
    (35) expression -> . STRING LPAREN expression RPAREN
    (36) expression -> . expression QUESTION_OP expression COLON_OP expression
    (37) expression -> . LPAREN expression RPAREN
    (38) expression -> . scalarvalue
    (39) expression -> . arrayvalues
    (40) expression -> . ID subscript
    (43) expression -> . exprfuncall
    (44) expression -> . exprparallel
    (63) scalarvalue -> . FLOATNUMBER
    (64) scalarvalue -> . INTNUMBER
    (65) scalarvalue -> . STRINGCONSTANT
    (66) arrayvalues -> . LBRACK arrayelements RBRACK
    (45) exprfuncall -> . ID LPAREN arglist RPAREN
    (50) exprparallel -> . LBRACE LBRACE parallelOp parallelFuncs RBRACE RBRACE

    SUBTRACT_OP     shift and go to state 9
    LOGNOT_OP       shift and go to state 19
    LENGTH          shift and go to state 25
    INT             shift and go to state 30
    FLOAT           shift and go to state 29
    STRING          shift and go to state 28
    LPAREN          shift and go to state 15
    ID              shift and go to state 16
    FLOATNUMBER     shift and go to state 5
    INTNUMBER       shift and go to state 10
    STRINGCONSTANT  shift and go to state 8
    LBRACK          shift and go to state 22
    LBRACE          shift and go to state 18

    exprparallel                   shift and go to state 6
    expression                     shift and go to state 159
    exprfuncall                    shift and go to state 7
    arrayvalues                    shift and go to state 12
    scalarvalue                    shift and go to state 20

state 158

    (3) stmtrest -> stmtrest statement .

    RETURN          reduce using rule 3 (stmtrest -> stmtrest statement .)
    SUBTRACT_OP     reduce using rule 3 (stmtrest -> stmtrest statement .)
    LOGNOT_OP       reduce using rule 3 (stmtrest -> stmtrest statement .)
    LENGTH          reduce using rule 3 (stmtrest -> stmtrest statement .)
    INT             reduce using rule 3 (stmtrest -> stmtrest statement .)
    FLOAT           reduce using rule 3 (stmtrest -> stmtrest statement .)
    STRING          reduce using rule 3 (stmtrest -> stmtrest statement .)
    LPAREN          reduce using rule 3 (stmtrest -> stmtrest statement .)
    ID              reduce using rule 3 (stmtrest -> stmtrest statement .)
    FLOATNUMBER     reduce using rule 3 (stmtrest -> stmtrest statement .)
    INTNUMBER       reduce using rule 3 (stmtrest -> stmtrest statement .)
    STRINGCONSTANT  reduce using rule 3 (stmtrest -> stmtrest statement .)
    LBRACK          reduce using rule 3 (stmtrest -> stmtrest statement .)
    LBRACE          reduce using rule 3 (stmtrest -> stmtrest statement .)


state 159

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression . SEP RBRACE
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . SUBTRACT_OP expression
    (18) expression -> expression . MULTIPLY_OP expression
    (19) expression -> expression . DIVIDE_OP expression
    (20) expression -> expression . MODULO_OP expression
    (21) expression -> expression . EQ_OP expression
    (22) expression -> expression . NE_OP expression
    (23) expression -> expression . GT_OP expression
    (24) expression -> expression . GE_OP expression
    (25) expression -> expression . LT_OP expression
    (26) expression -> expression . LE_OP expression
    (27) expression -> expression . LOGAND_OP expression
    (28) expression -> expression . LOGOR_OP expression
    (29) expression -> expression . TILDE_OP expression
    (36) expression -> expression . QUESTION_OP expression COLON_OP expression

    SEP             shift and go to state 160
    ADD_OP          shift and go to state 63
    SUBTRACT_OP     shift and go to state 59
    MULTIPLY_OP     shift and go to state 66
    DIVIDE_OP       shift and go to state 67
    MODULO_OP       shift and go to state 62
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 53
    GT_OP           shift and go to state 54
    GE_OP           shift and go to state 61
    LT_OP           shift and go to state 60
    LE_OP           shift and go to state 64
    LOGAND_OP       shift and go to state 58
    LOGOR_OP        shift and go to state 55
    TILDE_OP        shift and go to state 56
    QUESTION_OP     shift and go to state 65


state 160

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP . RBRACE

    RBRACE          shift and go to state 161


state 161

    (10) funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .

    RETURN          reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    SUBTRACT_OP     reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    LOGNOT_OP       reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    LENGTH          reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    INT             reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    FLOAT           reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    STRING          reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    LPAREN          reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    ID              reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    FLOATNUMBER     reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    INTNUMBER       reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    STRINGCONSTANT  reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    LBRACK          reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    LBRACE          reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)
    $end            reduce using rule 10 (funcassign -> typedecl ID ASSIGN_OP FUNCTION LPAREN paramlist pushToSymTable RPAREN LBRACE stmtrest RETURN expression SEP RBRACE .)

